{"version":3,"file":"docs.js","sources":["webpack:///webpack/bootstrap 85f3c153ef44ff1f29a6","webpack:///./node_modules/css-loader/lib/css-base.js","webpack:///src/docs/docs.js","webpack:///./src/docs/docs.css?3853","webpack:///./src/docs/docs.css","webpack:///./node_modules/style-loader/lib/addStyles.js","webpack:///./node_modules/style-loader/lib/urls.js","webpack:///src/main.js","webpack:///src/utils.js","webpack:///./node_modules/is-plain-object/index.js","webpack:///./node_modules/is-plain-object/node_modules/isobject/index.js","webpack:///./src/main.css?774c","webpack:///./src/main.css"],"sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 1);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap 85f3c153ef44ff1f29a6","/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n// css base code, injected by the css-loader\nmodule.exports = function(useSourceMap) {\n\tvar list = [];\n\n\t// return the list of modules as css string\n\tlist.toString = function toString() {\n\t\treturn this.map(function (item) {\n\t\t\tvar content = cssWithMappingToString(item, useSourceMap);\n\t\t\tif(item[2]) {\n\t\t\t\treturn \"@media \" + item[2] + \"{\" + content + \"}\";\n\t\t\t} else {\n\t\t\t\treturn content;\n\t\t\t}\n\t\t}).join(\"\");\n\t};\n\n\t// import a list of modules into the list\n\tlist.i = function(modules, mediaQuery) {\n\t\tif(typeof modules === \"string\")\n\t\t\tmodules = [[null, modules, \"\"]];\n\t\tvar alreadyImportedModules = {};\n\t\tfor(var i = 0; i < this.length; i++) {\n\t\t\tvar id = this[i][0];\n\t\t\tif(typeof id === \"number\")\n\t\t\t\talreadyImportedModules[id] = true;\n\t\t}\n\t\tfor(i = 0; i < modules.length; i++) {\n\t\t\tvar item = modules[i];\n\t\t\t// skip already imported module\n\t\t\t// this implementation is not 100% perfect for weird media query combinations\n\t\t\t//  when a module is imported multiple times with different media queries.\n\t\t\t//  I hope this will never occur (Hey this way we have smaller bundles)\n\t\t\tif(typeof item[0] !== \"number\" || !alreadyImportedModules[item[0]]) {\n\t\t\t\tif(mediaQuery && !item[2]) {\n\t\t\t\t\titem[2] = mediaQuery;\n\t\t\t\t} else if(mediaQuery) {\n\t\t\t\t\titem[2] = \"(\" + item[2] + \") and (\" + mediaQuery + \")\";\n\t\t\t\t}\n\t\t\t\tlist.push(item);\n\t\t\t}\n\t\t}\n\t};\n\treturn list;\n};\n\nfunction cssWithMappingToString(item, useSourceMap) {\n\tvar content = item[1] || '';\n\tvar cssMapping = item[3];\n\tif (!cssMapping) {\n\t\treturn content;\n\t}\n\n\tif (useSourceMap && typeof btoa === 'function') {\n\t\tvar sourceMapping = toComment(cssMapping);\n\t\tvar sourceURLs = cssMapping.sources.map(function (source) {\n\t\t\treturn '/*# sourceURL=' + cssMapping.sourceRoot + source + ' */'\n\t\t});\n\n\t\treturn [content].concat(sourceURLs).concat([sourceMapping]).join('\\n');\n\t}\n\n\treturn [content].join('\\n');\n}\n\n// Adapted from convert-source-map (MIT)\nfunction toComment(sourceMap) {\n\t// eslint-disable-next-line no-undef\n\tvar base64 = btoa(unescape(encodeURIComponent(JSON.stringify(sourceMap))));\n\tvar data = 'sourceMappingURL=data:application/json;charset=utf-8;base64,' + base64;\n\n\treturn '/*# ' + data + ' */';\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/css-loader/lib/css-base.js\n// module id = 0\n// module chunks = 0","import './docs.css';\nconst AColorPicker = require('../main.js');\nconst $title = document.querySelector('.title');\n\nconst pickers = AColorPicker.from('.picker')\n    .on('change', (picker, color) => {\n        console.log(color)\n        $title.style.backgroundColor = color;\n        if (AColorPicker.getLuminance(...picker.rgb) < .5) {\n            $title.style.color = '#fff';\n        } else {\n            $title.style.color = '#333';\n        }\n    })\n    .on('coloradd', (picker, color) => {\n        console.log(color)\n    })\n    .on('colorremove', (picker, color) => {\n        console.log(color)\n    });\n// console.log(pickers[0].color = '#fd0a');\n// console.log(pickers[0].color);\n// // console.log(pickers[0].getColor('hex'));\n// console.log(AColorPicker.parseColor(pickers[0].color, 'hex'));\n\n\n// WEBPACK FOOTER //\n// src/docs/docs.js","// style-loader: Adds some css to the DOM by adding a <style> tag\n\n// load the styles\nvar content = require(\"!!../../node_modules/css-loader/index.js!./docs.css\");\nif(typeof content === 'string') content = [[module.id, content, '']];\n// Prepare cssTransformation\nvar transform;\n\nvar options = {\"hmr\":true}\noptions.transform = transform\n// add the styles to the DOM\nvar update = require(\"!../../node_modules/style-loader/lib/addStyles.js\")(content, options);\nif(content.locals) module.exports = content.locals;\n// Hot Module Replacement\nif(module.hot) {\n\t// When the styles change, update the <style> tags\n\tif(!content.locals) {\n\t\tmodule.hot.accept(\"!!../../node_modules/css-loader/index.js!./docs.css\", function() {\n\t\t\tvar newContent = require(\"!!../../node_modules/css-loader/index.js!./docs.css\");\n\t\t\tif(typeof newContent === 'string') newContent = [[module.id, newContent, '']];\n\t\t\tupdate(newContent);\n\t\t});\n\t}\n\t// When the module is disposed, remove the <style> tags\n\tmodule.hot.dispose(function() { update(); });\n}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/docs/docs.css\n// module id = 2\n// module chunks = 0","exports = module.exports = require(\"../../node_modules/css-loader/lib/css-base.js\")(undefined);\n// imports\nexports.push([module.id, \"@import url(https://fonts.googleapis.com/css?family=Roboto);\", \"\"]);\n\n// module\nexports.push([module.id, \"* {\\n\\tbox-sizing: border-box;\\n}\\n\\nhtml {\\n\\tfont-family: 'Roboto', sans-serif;\\n\\tfont-size: 14px;\\n\\tfont-display: fallback;\\n\\tline-height: 1.7;\\n\\t--color-light: #f2eeee;\\n}\\n\\nbody {\\n\\tmargin: 0;\\n\\tbackground-color: #9a8297;\\n\\tbackground-color: #697b82;\\n}\\n\\ncode {\\n\\tcolor: #bc8f49;\\n}\\n\\ncode .par {\\n\\tcolor: #5b995b;\\n}\\n\\ncode .prop {\\n\\tcolor: #9a8297;\\n}\\n\\ncode .comment {\\n    color: #795548;\\n    font-style: italic;\\n}\\n\\n.flexrow {\\n\\tdisplay: flex;\\n\\tflex-direction: row;\\n\\tflex-wrap: wrap;\\n}\\n\\n.flexcol-1 {\\n\\tflex-grow: 1;\\n\\tflex-basis: 9em;\\n    margin: 16px 8px;\\n    max-width: 1024px;\\t\\n}\\n\\n.flexcol-2 {\\n\\tflex-grow: 9999;\\n\\tflex-basis: 20em;\\n}\\n\\n.shadow {\\n\\tbox-shadow: 0 2px 2px 0 rgba(0,0,0,0.16), 0 0 0 1px rgba(3, 1, 1, 0.08);\\n}\\n\\n.darken {\\n\\tbackground: #0000001f;\\n}\\n\\n.explanation {\\n    color: #9E9E9E;\\n\\tfont-size: .85em;\\n}\\n\\n.mark {\\n\\tborder-bottom: solid 2px #9a8297;\\n    padding-bottom: .6em;\\n\\tmargin-bottom: 1.6em;\\n}\\n\\n.eg {\\n\\tposition: relative;\\n\\tborder: solid 1px #e3ddd5;\\n    padding: 4px;\\n    border-radius: 2px;\\n    background-color: #f7f1e9;\\n}\\n\\n.eg::before {\\n\\tcontent: attr(title);\\n    position: absolute;\\n    top: -1.6em;\\n    font-size: .85em;\\n    font-weight: normal;\\n    color: #dedede;\\t\\n}\\n\\n.title {\\n\\ttop: 0;\\n\\tpadding: 0px 8px;\\n}\\n\\n.title>h1 {\\n\\tpadding: 8px 4px;\\n\\tmargin: 0;\\n\\tletter-spacing: .1em;\\n\\tfont-size: 3em;\\n\\tcolor: var(--color-light);\\n}\\n\\n.avatar {\\n\\tborder-radius: 4px;\\n\\tvertical-align: text-top;\\n\\tobject-fit: cover;\\n    width: 100%;\\n\\tmax-height: 6.6em;\\n    opacity: .3;\\n    filter: grayscale(100%);\\n    -webkit-filter: grayscale(100%);\\t\\n}\\n\\n.badges {\\n\\tpadding: 4px;\\n}\\n\\n.badges a {\\n\\ttext-decoration: none;\\n}\\n\\n.content>nav a {\\n    color: var(--color-light);\\n}\\n\\n.content>nav>ul {\\n\\tposition: sticky;\\n\\tposition: -webkit-sticky;\\n\\ttop: 0px;\\n\\tlist-style: none;\\n\\tpadding: 0;\\n}\\n\\n.content>nav>ul>li::before {\\n\\tcontent: '> ';\\n\\tcolor: #dedede;\\n}\\n\\n.content>nav>ul>li>ul {\\n\\tfont-size: .8em;\\n\\ttop: 0px;\\n\\tlist-style: none;\\n\\tpadding: 0 0 0 .8em;\\n}\\n\\n.content>.pens>section {\\n\\tbackground-color: #fafafa;\\n\\tmargin: 16px 8px;\\n\\tpadding: 8px 24px;\\n\\tborder-radius: 2px;\\n}\\n\\n.content>.pens>section>h3::before {\\n\\tcontent: '> ';\\n\\tcolor: #dedede;\\n}\\n\\ntable.detail {\\n\\twidth: 100%;\\n\\tborder-collapse: collapse;\\n}\\n\\ntable.detail th {\\n\\tfont-size: .85em;\\n\\ttext-align: left;\\n\\tpadding-top: 16px;\\n}\\n\\ntable.detail td {\\n\\tvertical-align: top;\\n\\tborder-bottom: solid 1px #ededed;\\n\\tmax-width: 14em;\\n\\tpadding: 4px 0px;\\n}\\n\\ntable.detail tbody,\\ntable.detail tbody>tr {\\n\\ttransition: background-color .4s ease;\\n}\\n\\ntable.detail.hover-on-row tbody>tr:hover,\\ntable.detail.hover-on-body tbody:hover {\\n\\tbackground-color: #efefef;\\n}\\n\\n@media (min-width: 68em) {\\n\\thtml {\\n\\t\\tfont-size: 18px;\\n\\t}\\n}\\n\\n@media (max-height: 400px) {\\n\\t.content>nav>ul {\\n\\t\\tposition: relative;\\n\\t}\\t\\n}\", \"\"]);\n\n// exports\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/css-loader!./src/docs/docs.css\n// module id = 3\n// module chunks = 0","/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\nvar stylesInDom = {};\n\nvar\tmemoize = function (fn) {\n\tvar memo;\n\n\treturn function () {\n\t\tif (typeof memo === \"undefined\") memo = fn.apply(this, arguments);\n\t\treturn memo;\n\t};\n};\n\nvar isOldIE = memoize(function () {\n\t// Test for IE <= 9 as proposed by Browserhacks\n\t// @see http://browserhacks.com/#hack-e71d8692f65334173fee715c222cb805\n\t// Tests for existence of standard globals is to allow style-loader\n\t// to operate correctly into non-standard environments\n\t// @see https://github.com/webpack-contrib/style-loader/issues/177\n\treturn window && document && document.all && !window.atob;\n});\n\nvar getElement = (function (fn) {\n\tvar memo = {};\n\n\treturn function(selector) {\n\t\tif (typeof memo[selector] === \"undefined\") {\n\t\t\tvar styleTarget = fn.call(this, selector);\n\t\t\t// Special case to return head of iframe instead of iframe itself\n\t\t\tif (styleTarget instanceof window.HTMLIFrameElement) {\n\t\t\t\ttry {\n\t\t\t\t\t// This will throw an exception if access to iframe is blocked\n\t\t\t\t\t// due to cross-origin restrictions\n\t\t\t\t\tstyleTarget = styleTarget.contentDocument.head;\n\t\t\t\t} catch(e) {\n\t\t\t\t\tstyleTarget = null;\n\t\t\t\t}\n\t\t\t}\n\t\t\tmemo[selector] = styleTarget;\n\t\t}\n\t\treturn memo[selector]\n\t};\n})(function (target) {\n\treturn document.querySelector(target)\n});\n\nvar singleton = null;\nvar\tsingletonCounter = 0;\nvar\tstylesInsertedAtTop = [];\n\nvar\tfixUrls = require(\"./urls\");\n\nmodule.exports = function(list, options) {\n\tif (typeof DEBUG !== \"undefined\" && DEBUG) {\n\t\tif (typeof document !== \"object\") throw new Error(\"The style-loader cannot be used in a non-browser environment\");\n\t}\n\n\toptions = options || {};\n\n\toptions.attrs = typeof options.attrs === \"object\" ? options.attrs : {};\n\n\t// Force single-tag solution on IE6-9, which has a hard limit on the # of <style>\n\t// tags it will allow on a page\n\tif (!options.singleton) options.singleton = isOldIE();\n\n\t// By default, add <style> tags to the <head> element\n\tif (!options.insertInto) options.insertInto = \"head\";\n\n\t// By default, add <style> tags to the bottom of the target\n\tif (!options.insertAt) options.insertAt = \"bottom\";\n\n\tvar styles = listToStyles(list, options);\n\n\taddStylesToDom(styles, options);\n\n\treturn function update (newList) {\n\t\tvar mayRemove = [];\n\n\t\tfor (var i = 0; i < styles.length; i++) {\n\t\t\tvar item = styles[i];\n\t\t\tvar domStyle = stylesInDom[item.id];\n\n\t\t\tdomStyle.refs--;\n\t\t\tmayRemove.push(domStyle);\n\t\t}\n\n\t\tif(newList) {\n\t\t\tvar newStyles = listToStyles(newList, options);\n\t\t\taddStylesToDom(newStyles, options);\n\t\t}\n\n\t\tfor (var i = 0; i < mayRemove.length; i++) {\n\t\t\tvar domStyle = mayRemove[i];\n\n\t\t\tif(domStyle.refs === 0) {\n\t\t\t\tfor (var j = 0; j < domStyle.parts.length; j++) domStyle.parts[j]();\n\n\t\t\t\tdelete stylesInDom[domStyle.id];\n\t\t\t}\n\t\t}\n\t};\n};\n\nfunction addStylesToDom (styles, options) {\n\tfor (var i = 0; i < styles.length; i++) {\n\t\tvar item = styles[i];\n\t\tvar domStyle = stylesInDom[item.id];\n\n\t\tif(domStyle) {\n\t\t\tdomStyle.refs++;\n\n\t\t\tfor(var j = 0; j < domStyle.parts.length; j++) {\n\t\t\t\tdomStyle.parts[j](item.parts[j]);\n\t\t\t}\n\n\t\t\tfor(; j < item.parts.length; j++) {\n\t\t\t\tdomStyle.parts.push(addStyle(item.parts[j], options));\n\t\t\t}\n\t\t} else {\n\t\t\tvar parts = [];\n\n\t\t\tfor(var j = 0; j < item.parts.length; j++) {\n\t\t\t\tparts.push(addStyle(item.parts[j], options));\n\t\t\t}\n\n\t\t\tstylesInDom[item.id] = {id: item.id, refs: 1, parts: parts};\n\t\t}\n\t}\n}\n\nfunction listToStyles (list, options) {\n\tvar styles = [];\n\tvar newStyles = {};\n\n\tfor (var i = 0; i < list.length; i++) {\n\t\tvar item = list[i];\n\t\tvar id = options.base ? item[0] + options.base : item[0];\n\t\tvar css = item[1];\n\t\tvar media = item[2];\n\t\tvar sourceMap = item[3];\n\t\tvar part = {css: css, media: media, sourceMap: sourceMap};\n\n\t\tif(!newStyles[id]) styles.push(newStyles[id] = {id: id, parts: [part]});\n\t\telse newStyles[id].parts.push(part);\n\t}\n\n\treturn styles;\n}\n\nfunction insertStyleElement (options, style) {\n\tvar target = getElement(options.insertInto)\n\n\tif (!target) {\n\t\tthrow new Error(\"Couldn't find a style target. This probably means that the value for the 'insertInto' parameter is invalid.\");\n\t}\n\n\tvar lastStyleElementInsertedAtTop = stylesInsertedAtTop[stylesInsertedAtTop.length - 1];\n\n\tif (options.insertAt === \"top\") {\n\t\tif (!lastStyleElementInsertedAtTop) {\n\t\t\ttarget.insertBefore(style, target.firstChild);\n\t\t} else if (lastStyleElementInsertedAtTop.nextSibling) {\n\t\t\ttarget.insertBefore(style, lastStyleElementInsertedAtTop.nextSibling);\n\t\t} else {\n\t\t\ttarget.appendChild(style);\n\t\t}\n\t\tstylesInsertedAtTop.push(style);\n\t} else if (options.insertAt === \"bottom\") {\n\t\ttarget.appendChild(style);\n\t} else if (typeof options.insertAt === \"object\" && options.insertAt.before) {\n\t\tvar nextSibling = getElement(options.insertInto + \" \" + options.insertAt.before);\n\t\ttarget.insertBefore(style, nextSibling);\n\t} else {\n\t\tthrow new Error(\"[Style Loader]\\n\\n Invalid value for parameter 'insertAt' ('options.insertAt') found.\\n Must be 'top', 'bottom', or Object.\\n (https://github.com/webpack-contrib/style-loader#insertat)\\n\");\n\t}\n}\n\nfunction removeStyleElement (style) {\n\tif (style.parentNode === null) return false;\n\tstyle.parentNode.removeChild(style);\n\n\tvar idx = stylesInsertedAtTop.indexOf(style);\n\tif(idx >= 0) {\n\t\tstylesInsertedAtTop.splice(idx, 1);\n\t}\n}\n\nfunction createStyleElement (options) {\n\tvar style = document.createElement(\"style\");\n\n\toptions.attrs.type = \"text/css\";\n\n\taddAttrs(style, options.attrs);\n\tinsertStyleElement(options, style);\n\n\treturn style;\n}\n\nfunction createLinkElement (options) {\n\tvar link = document.createElement(\"link\");\n\n\toptions.attrs.type = \"text/css\";\n\toptions.attrs.rel = \"stylesheet\";\n\n\taddAttrs(link, options.attrs);\n\tinsertStyleElement(options, link);\n\n\treturn link;\n}\n\nfunction addAttrs (el, attrs) {\n\tObject.keys(attrs).forEach(function (key) {\n\t\tel.setAttribute(key, attrs[key]);\n\t});\n}\n\nfunction addStyle (obj, options) {\n\tvar style, update, remove, result;\n\n\t// If a transform function was defined, run it on the css\n\tif (options.transform && obj.css) {\n\t    result = options.transform(obj.css);\n\n\t    if (result) {\n\t    \t// If transform returns a value, use that instead of the original css.\n\t    \t// This allows running runtime transformations on the css.\n\t    \tobj.css = result;\n\t    } else {\n\t    \t// If the transform function returns a falsy value, don't add this css.\n\t    \t// This allows conditional loading of css\n\t    \treturn function() {\n\t    \t\t// noop\n\t    \t};\n\t    }\n\t}\n\n\tif (options.singleton) {\n\t\tvar styleIndex = singletonCounter++;\n\n\t\tstyle = singleton || (singleton = createStyleElement(options));\n\n\t\tupdate = applyToSingletonTag.bind(null, style, styleIndex, false);\n\t\tremove = applyToSingletonTag.bind(null, style, styleIndex, true);\n\n\t} else if (\n\t\tobj.sourceMap &&\n\t\ttypeof URL === \"function\" &&\n\t\ttypeof URL.createObjectURL === \"function\" &&\n\t\ttypeof URL.revokeObjectURL === \"function\" &&\n\t\ttypeof Blob === \"function\" &&\n\t\ttypeof btoa === \"function\"\n\t) {\n\t\tstyle = createLinkElement(options);\n\t\tupdate = updateLink.bind(null, style, options);\n\t\tremove = function () {\n\t\t\tremoveStyleElement(style);\n\n\t\t\tif(style.href) URL.revokeObjectURL(style.href);\n\t\t};\n\t} else {\n\t\tstyle = createStyleElement(options);\n\t\tupdate = applyToTag.bind(null, style);\n\t\tremove = function () {\n\t\t\tremoveStyleElement(style);\n\t\t};\n\t}\n\n\tupdate(obj);\n\n\treturn function updateStyle (newObj) {\n\t\tif (newObj) {\n\t\t\tif (\n\t\t\t\tnewObj.css === obj.css &&\n\t\t\t\tnewObj.media === obj.media &&\n\t\t\t\tnewObj.sourceMap === obj.sourceMap\n\t\t\t) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tupdate(obj = newObj);\n\t\t} else {\n\t\t\tremove();\n\t\t}\n\t};\n}\n\nvar replaceText = (function () {\n\tvar textStore = [];\n\n\treturn function (index, replacement) {\n\t\ttextStore[index] = replacement;\n\n\t\treturn textStore.filter(Boolean).join('\\n');\n\t};\n})();\n\nfunction applyToSingletonTag (style, index, remove, obj) {\n\tvar css = remove ? \"\" : obj.css;\n\n\tif (style.styleSheet) {\n\t\tstyle.styleSheet.cssText = replaceText(index, css);\n\t} else {\n\t\tvar cssNode = document.createTextNode(css);\n\t\tvar childNodes = style.childNodes;\n\n\t\tif (childNodes[index]) style.removeChild(childNodes[index]);\n\n\t\tif (childNodes.length) {\n\t\t\tstyle.insertBefore(cssNode, childNodes[index]);\n\t\t} else {\n\t\t\tstyle.appendChild(cssNode);\n\t\t}\n\t}\n}\n\nfunction applyToTag (style, obj) {\n\tvar css = obj.css;\n\tvar media = obj.media;\n\n\tif(media) {\n\t\tstyle.setAttribute(\"media\", media)\n\t}\n\n\tif(style.styleSheet) {\n\t\tstyle.styleSheet.cssText = css;\n\t} else {\n\t\twhile(style.firstChild) {\n\t\t\tstyle.removeChild(style.firstChild);\n\t\t}\n\n\t\tstyle.appendChild(document.createTextNode(css));\n\t}\n}\n\nfunction updateLink (link, options, obj) {\n\tvar css = obj.css;\n\tvar sourceMap = obj.sourceMap;\n\n\t/*\n\t\tIf convertToAbsoluteUrls isn't defined, but sourcemaps are enabled\n\t\tand there is no publicPath defined then lets turn convertToAbsoluteUrls\n\t\ton by default.  Otherwise default to the convertToAbsoluteUrls option\n\t\tdirectly\n\t*/\n\tvar autoFixUrls = options.convertToAbsoluteUrls === undefined && sourceMap;\n\n\tif (options.convertToAbsoluteUrls || autoFixUrls) {\n\t\tcss = fixUrls(css);\n\t}\n\n\tif (sourceMap) {\n\t\t// http://stackoverflow.com/a/26603875\n\t\tcss += \"\\n/*# sourceMappingURL=data:application/json;base64,\" + btoa(unescape(encodeURIComponent(JSON.stringify(sourceMap)))) + \" */\";\n\t}\n\n\tvar blob = new Blob([css], { type: \"text/css\" });\n\n\tvar oldSrc = link.href;\n\n\tlink.href = URL.createObjectURL(blob);\n\n\tif(oldSrc) URL.revokeObjectURL(oldSrc);\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/style-loader/lib/addStyles.js\n// module id = 4\n// module chunks = 0","\n/**\n * When source maps are enabled, `style-loader` uses a link element with a data-uri to\n * embed the css on the page. This breaks all relative urls because now they are relative to a\n * bundle instead of the current page.\n *\n * One solution is to only use full urls, but that may be impossible.\n *\n * Instead, this function \"fixes\" the relative urls to be absolute according to the current page location.\n *\n * A rudimentary test suite is located at `test/fixUrls.js` and can be run via the `npm test` command.\n *\n */\n\nmodule.exports = function (css) {\n  // get current location\n  var location = typeof window !== \"undefined\" && window.location;\n\n  if (!location) {\n    throw new Error(\"fixUrls requires window.location\");\n  }\n\n\t// blank or null?\n\tif (!css || typeof css !== \"string\") {\n\t  return css;\n  }\n\n  var baseUrl = location.protocol + \"//\" + location.host;\n  var currentDir = baseUrl + location.pathname.replace(/\\/[^\\/]*$/, \"/\");\n\n\t// convert each url(...)\n\t/*\n\tThis regular expression is just a way to recursively match brackets within\n\ta string.\n\n\t /url\\s*\\(  = Match on the word \"url\" with any whitespace after it and then a parens\n\t   (  = Start a capturing group\n\t     (?:  = Start a non-capturing group\n\t         [^)(]  = Match anything that isn't a parentheses\n\t         |  = OR\n\t         \\(  = Match a start parentheses\n\t             (?:  = Start another non-capturing groups\n\t                 [^)(]+  = Match anything that isn't a parentheses\n\t                 |  = OR\n\t                 \\(  = Match a start parentheses\n\t                     [^)(]*  = Match anything that isn't a parentheses\n\t                 \\)  = Match a end parentheses\n\t             )  = End Group\n              *\\) = Match anything and then a close parens\n          )  = Close non-capturing group\n          *  = Match anything\n       )  = Close capturing group\n\t \\)  = Match a close parens\n\n\t /gi  = Get all matches, not the first.  Be case insensitive.\n\t */\n\tvar fixedCss = css.replace(/url\\s*\\(((?:[^)(]|\\((?:[^)(]+|\\([^)(]*\\))*\\))*)\\)/gi, function(fullMatch, origUrl) {\n\t\t// strip quotes (if they exist)\n\t\tvar unquotedOrigUrl = origUrl\n\t\t\t.trim()\n\t\t\t.replace(/^\"(.*)\"$/, function(o, $1){ return $1; })\n\t\t\t.replace(/^'(.*)'$/, function(o, $1){ return $1; });\n\n\t\t// already a full url? no change\n\t\tif (/^(#|data:|http:\\/\\/|https:\\/\\/|file:\\/\\/\\/)/i.test(unquotedOrigUrl)) {\n\t\t  return fullMatch;\n\t\t}\n\n\t\t// convert the url to a full url\n\t\tvar newUrl;\n\n\t\tif (unquotedOrigUrl.indexOf(\"//\") === 0) {\n\t\t  \t//TODO: should we add protocol?\n\t\t\tnewUrl = unquotedOrigUrl;\n\t\t} else if (unquotedOrigUrl.indexOf(\"/\") === 0) {\n\t\t\t// path should be relative to the base url\n\t\t\tnewUrl = baseUrl + unquotedOrigUrl; // already starts with '/'\n\t\t} else {\n\t\t\t// path should be relative to current directory\n\t\t\tnewUrl = currentDir + unquotedOrigUrl.replace(/^\\.\\//, \"\"); // Strip leading './'\n\t\t}\n\n\t\t// send back the fixed url(...)\n\t\treturn \"url(\" + JSON.stringify(newUrl) + \")\";\n\t});\n\n\t// send back the fixed css\n\treturn fixedCss;\n};\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/style-loader/lib/urls.js\n// module id = 5\n// module chunks = 0","// TODO: provo a importare \"a mano\" il css\n// import './main.css';\nimport {\n    COLOR_NAMES,\n    PALETTE_MATERIAL_500,\n    PALETTE_MATERIAL_CHROME,\n    rgbToHex,\n    hslToRgb,\n    rgbToHsl,\n    rgbToInt,\n    intToRgb,\n    cssColorToRgb,\n    cssColorToRgba,\n    cssRgbToRgb,\n    cssRgbaToRgba,\n    parseColorToRgb,\n    parseColorToRgba,\n    cssHslToHsl,\n    cssHslaToHsla,\n    parseColorToHsl,\n    parseColorToHsla,\n    parseColor,\n    getLuminance,\n    limit,\n    ensureArray,\n    nvl\n} from './utils.js';\n\nconst VERSION = '1.0.6';\n\nconst IS_EDGE = typeof window !== 'undefined' && window.navigator.userAgent.indexOf('Edge') > -1,\n    IS_IE11 = typeof window !== 'undefined' && window.navigator.userAgent.indexOf('rv:') > -1;\n\nconst DEFAULT = {\n    attachTo: 'body',\n    showHSL: true,\n    showRGB: true,\n    showHEX: true,\n    showAlpha: false,\n    color: '#ff0000',\n    palette: null,\n    paletteEditable: false\n};\n\nconst SL_BAR_SIZE = [200, 150],\n    HUE_BAR_SIZE = [150, 16],\n    ALPHA_BAR_SIZE = HUE_BAR_SIZE,\n    HUE = 'H',\n    SATURATION = 'S',\n    LUMINANCE = 'L',\n    RGB = 'RGB',\n    RED = 'R',\n    GREEN = 'G',\n    BLUE = 'B',\n    RGBHEX = 'RGBHEX',\n    COLOR = 'COLOR',\n    RGBA_USER = 'RGBA_USER',\n    HSLA_USER = 'HSLA_USER',\n    ALPHA = 'ALPHA';\n\nconst HTML_BOX = `<div class=\"a-color-picker-row a-color-picker-stack\">\n                            <canvas class=\"a-color-picker-sl a-color-picker-transparent\"></canvas>\n                            <div class=\"a-color-picker-dot\"></div>\n                        </div>\n                        <div class=\"a-color-picker-row\">\n                            <div class=\"a-color-picker-stack a-color-picker-transparent a-color-picker-circle\">\n                                <div class=\"a-color-picker-preview\">\n                                    <input class=\"a-color-picker-clipbaord\" type=\"text\">\n                                </div>\n                            </div>\n                            <div class=\"a-color-picker-column\">\n                                <div class=\"a-color-picker-cell a-color-picker-stack\">\n                                    <canvas class=\"a-color-picker-h\"></canvas>\n                                    <div class=\"a-color-picker-dot\"></div>\n                                </div>\n                                <div class=\"a-color-picker-cell a-color-picker-stack\" show-on-alpha>\n                                    <canvas class=\"a-color-picker-a a-color-picker-transparent\"></canvas>\n                                    <div class=\"a-color-picker-dot\"></div>\n                                </div>\n                            </div>\n                        </div>\n                        <div class=\"a-color-picker-row a-color-picker-hsl\" show-on-hsl>\n                            <label>H</label>\n                            <input name=\"H\" type=\"number\" maxlength=\"3\" min=\"0\" max=\"360\" value=\"0\">\n                            <label>S</label>\n                            <input name=\"S\" type=\"number\" maxlength=\"3\" min=\"0\" max=\"100\" value=\"0\">\n                            <label>L</label>\n                            <input name=\"L\" type=\"number\" maxlength=\"3\" min=\"0\" max=\"100\" value=\"0\">\n                        </div>\n                        <div class=\"a-color-picker-row a-color-picker-rgb\" show-on-rgb>\n                            <label>R</label>\n                            <input name=\"R\" type=\"number\" maxlength=\"3\" min=\"0\" max=\"255\" value=\"0\">\n                            <label>G</label>\n                            <input name=\"G\" type=\"number\" maxlength=\"3\" min=\"0\" max=\"255\" value=\"0\">\n                            <label>B</label>\n                            <input name=\"B\" type=\"number\" maxlength=\"3\" min=\"0\" max=\"255\" value=\"0\">\n                        </div>\n                        <div class=\"a-color-picker-row a-color-picker-single-input\" show-on-single-input>\n                            <label>HEX</label>\n                            <input name=\"RGBHEX\" type=\"text\" select-on-focus>\n                        </div>\n                        <div class=\"a-color-picker-row a-color-picker-palette\"></div>`;\n\nfunction parseElement(element, defaultElement, fallToDefault) {\n    if (!element) {\n        return defaultElement;\n    } else if (element instanceof HTMLElement) {\n        return element;\n    } else if (element instanceof NodeList) {\n        return element[0];\n    } else if (typeof element == 'string') {\n        return document.querySelector(element);\n    } else if (element.jquery) {\n        return element.get(0); //TODO: da testare parseElement con jQuery\n    } else if (fallToDefault) {\n        return defaultElement;\n    } else {\n        return null;\n    }\n}\n\nfunction parseElements(selector) {\n    if (!selector) {\n        return [];\n    } else if (Array.isArray(selector)) {\n        return selector;\n    } else if (selector instanceof HTMLElement) {\n        return [selector];\n    } else if (selector instanceof NodeList) {\n        return [...selector];\n    } else if (typeof selector == 'string') {\n        return [...document.querySelectorAll(selector)];\n    } else if (selector.jquery) {\n        return selector.get(); //TODO: da testare parseElements con jQuery\n    } else {\n        return [];\n    }\n}\n\nfunction canvasHelper(canvas) {\n    const ctx = canvas.getContext('2d'),\n        width = +canvas.width,\n        height = +canvas.height;\n    // questo gradiente da bianco (alto) a nero (basso) viene applicato come sfondo al canvas\n    const whiteBlackGradient = ctx.createLinearGradient(1, 1, 1, height - 1);\n    whiteBlackGradient.addColorStop(0, 'white');\n    whiteBlackGradient.addColorStop(1, 'black');\n    return {\n        setHue(hue) {\n            // gradiente con il colore relavito a lo HUE da sinistra a destra partendo da trasparente a opaco\n            // la combinazione del gradiente bianco/nero e questo permette di avere un canvas dove \n            // sull'asse delle ordinate è espressa la saturazione, e sull'asse delle ascisse c'è la luminosità\n            const colorGradient = ctx.createLinearGradient(0, 0, width - 1, 0);\n            colorGradient.addColorStop(0, `hsla(${hue}, 100%, 50%, 0)`);\n            colorGradient.addColorStop(1, `hsla(${hue}, 100%, 50%, 1)`);\n            // applico i gradienti\n            ctx.fillStyle = whiteBlackGradient;\n            ctx.fillRect(0, 0, width, height);\n            ctx.fillStyle = colorGradient;\n            ctx.globalCompositeOperation = 'multiply';\n            ctx.fillRect(0, 0, width, height);\n            ctx.globalCompositeOperation = 'source-over';\n        },\n\n        grabColor(x, y) {\n            // recupera il colore del pixel in formato RGBA\n            return ctx.getImageData(x, y, 1, 1).data;\n        },\n\n        findColor(r, g, b) {\n            // TODO: se la luminosità è bassa posso controllare prima la parte inferiore\n            const rowLen = width * 4,\n                // visto che non sono sicuro di trovare il colore esatto considero un gap in + e - su tutti i 3 valori\n                gap = 5,\n                // array contenente tutti i pixel, ogni pixel sono 4 byte RGBA (quindi è grande w*h*4)\n                data = ctx.getImageData(0, 0, width, height).data;\n            let coord = [-1, -1];\n            // console.log(data.length, r, g, b)\n            // console.log(data)\n            // console.time('findColor');\n            // scorro l'array di pixel, ogni 4 byte c'è un pixel nuovo\n            for (let ii = 0; ii < data.length; ii += 4) {\n                if (Math.abs(data[ii] - r) <= gap &&\n                    Math.abs(data[ii + 1] - g) <= gap &&\n                    Math.abs(data[ii + 2] - b) <= gap) {\n                    // console.log('found', ii, Math.floor(ii/rowLen), (ii%rowLen)/4);\n                    coord = [(ii % rowLen) / 4, Math.floor(ii / rowLen)];\n                    break;\n                }\n            }\n            // console.timeEnd('findColor');\n            return coord;\n        }\n    };\n}\n\nfunction parseAttrBoolean(value, ifNull, ifEmpty) {\n    if (value === null) {\n        return ifNull;\n    } else if (/^\\s*$/.test(value)) {\n        return ifEmpty;\n    } else if (/true|yes|1/i.test(value)) {\n        return true;\n    } else if (/false|no|0/i.test(value)) {\n        return false;\n    } else {\n        return ifNull;\n    }\n}\n\nfunction copyOptionsFromElement(options, element, attrPrefix = 'acp-') {\n    // getAttribute() dovrebbe restituire null se l'attr non esiste, ma le vecchie specifiche prevedono il ritorno di una stringa vuota\n    //  quindi è meglio verificare l'esistenza dell'attr con hasAttribute()\n    if (element.hasAttribute(attrPrefix + 'show-hsl')) {\n        options.showHSL = parseAttrBoolean(element.getAttribute(attrPrefix + 'show-hsl'), DEFAULT.showHSL, true);\n    }\n    if (element.hasAttribute(attrPrefix + 'show-rgb')) {\n        options.showRGB = parseAttrBoolean(element.getAttribute(attrPrefix + 'show-rgb'), DEFAULT.showRGB, true);\n    }\n    if (element.hasAttribute(attrPrefix + 'show-hex')) {\n        options.showHEX = parseAttrBoolean(element.getAttribute(attrPrefix + 'show-hex'), DEFAULT.showHEX, true);\n    }\n    if (element.hasAttribute(attrPrefix + 'show-alpha')) {\n        options.showAlpha = parseAttrBoolean(element.getAttribute(attrPrefix + 'show-alpha'), DEFAULT.showAlpha, true);\n    }\n    if (element.hasAttribute(attrPrefix + 'palette-editable')) {\n        options.paletteEditable = parseAttrBoolean(element.getAttribute(attrPrefix + 'palette-editable'), DEFAULT.paletteEditable, true);\n    }\n    if (element.hasAttribute(attrPrefix + 'palette')) {\n        const palette = element.getAttribute(attrPrefix + 'palette');\n        switch (palette) {\n            case 'PALETTE_MATERIAL_500':\n                options.palette = PALETTE_MATERIAL_500;\n                break;\n            case 'PALETTE_MATERIAL_CHROME':\n            case '':\n                options.palette = PALETTE_MATERIAL_CHROME;\n                break;\n            default:\n                options.palette = palette.split(/[;\\|]/);\n                break;\n        }\n    }\n    if (element.hasAttribute(attrPrefix + 'color')) {\n        options.color = element.getAttribute(attrPrefix + 'color');\n    }\n}\n\nclass ColorPicker {\n    constructor(container, options) {\n        if (!options) {\n            if (container && container.attachTo) {\n                // se non trovo options e container è un {} con almeno la proprietà attachTo\n                //  lo considero il vero options\n                this.options = Object.assign({}, DEFAULT, container);\n                container = parseElement(this.options.attachTo);\n            } else {\n                // altrimenti uso le opzioni di default\n                this.options = Object.assign({}, DEFAULT);\n                container = parseElement(container);\n            }\n        } else {\n            container = parseElement(container);\n            this.options = Object.assign({}, DEFAULT, options);\n        }\n\n        /*         if (container) {\n                    // se viene passato al costrutto un elemento HTML uso le opzioni di default\n                    this.options = Object.assign({}, DEFAULT, { attachTo: options });\n                } else {\n                    // altrimenti presumo che sia indicato nelle opzioni qual'è il contenitore\n                    this.options = Object.assign({}, DEFAULT, options);\n                    container = parseElement(this.options.attachTo);\n                }\n         */\n        if (container) {\n            // le opzioni possono essere specificate come attributi dell'elemento contenitore\n            // quelle presenti sostituiranno le corrispondenti passate con il parametro options\n            copyOptionsFromElement(this.options, container);\n\n            this.H = 0;\n            this.S = 0;\n            this.L = 0;\n            this.R = 0;\n            this.G = 0;\n            this.B = 0;\n            this.A = 1;\n            // andrà a contenere la palette di colori effettivamente usata\n            // compresi i colori aggiunti o rimossi dall'utente, non sarà modificabile dirretamente dall'utente\n            this.palette = { /*<color>: boolean*/ };\n\n            // creo gli elementi HTML e li aggiungo al container\n            this.element = document.createElement('div');\n            this.element.className = 'a-color-picker';\n            // se falsy viene nascosto .a-color-picker-rgb\n            if (!this.options.showRGB) this.element.className += ' hide-rgb';\n            // se falsy viene nascosto .a-color-picker-hsl\n            if (!this.options.showHSL) this.element.className += ' hide-hsl';\n            // se falsy viene nascosto .a-color-picker-single-input (css hex)\n            if (!this.options.showHEX) this.element.className += ' hide-single-input';\n            // se falsy viene nascosto .a-color-picker-a\n            if (!this.options.showAlpha) this.element.className += ' hide-alpha';\n            this.element.innerHTML = HTML_BOX;\n            container.appendChild(this.element);\n            // preparo il canvas con tutto lo spettro del HUE (da 0 a 360)\n            // in base al valore selezionato su questo canvas verrà disegnato il canvas per SL\n            const hueBar = this.element.querySelector('.a-color-picker-h');\n            this.setupHueCanvas(hueBar);\n            this.hueBarHelper = canvasHelper(hueBar);\n            this.huePointer = this.element.querySelector('.a-color-picker-h+.a-color-picker-dot');\n            // preparo il canvas per SL (saturation e luminance)\n            const slBar = this.element.querySelector('.a-color-picker-sl');\n            this.setupSlCanvas(slBar);\n            this.slBarHelper = canvasHelper(slBar);\n            this.slPointer = this.element.querySelector('.a-color-picker-sl+.a-color-picker-dot');\n            // preparo il box della preview\n            this.preview = this.element.querySelector('.a-color-picker-preview');\n            this.setupClipboard(this.preview.querySelector('.a-color-picker-clipbaord'));\n            // prearo gli input box\n            this.setupInput(this.inputH = this.element.querySelector('.a-color-picker-hsl>input[name=H]'));\n            this.setupInput(this.inputS = this.element.querySelector('.a-color-picker-hsl>input[name=S]'));\n            this.setupInput(this.inputL = this.element.querySelector('.a-color-picker-hsl>input[name=L]'));\n            this.setupInput(this.inputR = this.element.querySelector('.a-color-picker-rgb>input[name=R]'));\n            this.setupInput(this.inputG = this.element.querySelector('.a-color-picker-rgb>input[name=G]'));\n            this.setupInput(this.inputB = this.element.querySelector('.a-color-picker-rgb>input[name=B]'));\n            // preparo l'input per il formato hex css\n            this.setupInput(this.inputRGBHEX = this.element.querySelector('input[name=RGBHEX]'));\n            // preparo la palette con i colori predefiniti\n            this.setPalette(this.element.querySelector('.a-color-picker-palette'));\n            // preparo in canvas per l'opacità\n            this.setupAlphaCanvas(this.element.querySelector('.a-color-picker-a'));\n            this.alphaPointer = this.element.querySelector('.a-color-picker-a+.a-color-picker-dot');\n            // imposto il colore iniziale\n            this.onValueChanged(COLOR, this.options.color);\n        } else {\n            throw `Container not found: ${this.options.attachTo}`;\n        }\n    }\n\n    setupHueCanvas(canvas) {\n        canvas.width = HUE_BAR_SIZE[0];\n        canvas.height = HUE_BAR_SIZE[1];\n        // disegno sul canvas applicando un gradiente lineare che copra tutti i possibili valori di HUE\n        //  quindi ci vogliono 361 stop (da 0 a 360), mantendo fisse S e L\n        const ctx = canvas.getContext('2d'),\n            gradient = ctx.createLinearGradient(0, 0, HUE_BAR_SIZE[0], 0),\n            step = 1 / 360;\n        // aggiungo tutti i 361 step al gradiente\n        for (let ii = 0; ii <= 1; ii += step) {\n            gradient.addColorStop(ii, `hsl(${360 * ii}, 100%, 50%)`);\n        }\n        ctx.fillStyle = gradient;\n        ctx.fillRect(0, 0, HUE_BAR_SIZE[0], HUE_BAR_SIZE[1]);\n        // gestisco gli eventi per la selezione del valore e segnalo il cambiamento tramite callbak\n        // una volta che il puntatore è premuto sul canvas (mousedown) \n        // intercetto le variazioni nella posizione del puntatore (mousemove)\n        // relativamente al document, in modo che il puntatore in movimento possa uscire dal canvas\n        // una volta sollevato (mouseup) elimino i listener\n        const onMouseMove = (e) => {\n            const x = limit(e.clientX - canvas.getBoundingClientRect().left, 0, HUE_BAR_SIZE[0]),\n                hue = Math.round(x * 360 / HUE_BAR_SIZE[0]);\n            this.huePointer.style.left = (x - 7) + 'px';\n            this.onValueChanged(HUE, hue);\n        };\n        const onMouseUp = () => {\n            // rimuovo i listener, verranno riattivati al prossimo mousedown\n            document.removeEventListener('mousemove', onMouseMove);\n            document.removeEventListener('mouseup', onMouseUp);\n        };\n        // mouse down sul canvas: intercetto il movimento, smetto appena il mouse viene sollevato\n        canvas.addEventListener('mousedown', (e) => {\n            onMouseMove(e);\n            document.addEventListener('mousemove', onMouseMove);\n            document.addEventListener('mouseup', onMouseUp);\n        });\n    }\n\n    setupSlCanvas(canvas) {\n        canvas.width = SL_BAR_SIZE[0];\n        canvas.height = SL_BAR_SIZE[1];\n        // gestisco gli eventi per la selezione del valore e segnalo il cambiamento tramite callbak\n        // una volta che il puntatore è premuto sul canvas (mousedown) \n        // intercetto le variazioni nella posizione del puntatore (mousemove)\n        // relativamente al document, in modo che il puntatore in movimento possa uscire dal canvas\n        // una volta sollevato (mouseup) elimino i listener\n        const onMouseMove = (e) => {\n            const x = limit(e.clientX - canvas.getBoundingClientRect().left, 0, SL_BAR_SIZE[0] - 1),\n                y = limit(e.clientY - canvas.getBoundingClientRect().top, 0, SL_BAR_SIZE[1] - 1),\n                c = this.slBarHelper.grabColor(x, y);\n            // console.log('grab', x, y, c)\n            this.slPointer.style.left = (x - 7) + 'px';\n            this.slPointer.style.top = (y - 7) + 'px';\n            this.onValueChanged(RGB, c);\n        };\n        const onMouseUp = () => {\n            // rimuovo i listener, verranno riattivati al prossimo mousedown\n            document.removeEventListener('mousemove', onMouseMove);\n            document.removeEventListener('mouseup', onMouseUp);\n        };\n        // mouse down sul canvas: intercetto il movimento, smetto appena il mouse viene sollevato\n        canvas.addEventListener('mousedown', (e) => {\n            onMouseMove(e);\n            document.addEventListener('mousemove', onMouseMove);\n            document.addEventListener('mouseup', onMouseUp);\n        });\n    }\n\n    setupAlphaCanvas(canvas) {\n        canvas.width = ALPHA_BAR_SIZE[0];\n        canvas.height = ALPHA_BAR_SIZE[1];\n        // disegno sul canvas con un gradiente che va dalla piena trasparenza al pieno opaco\n        const ctx = canvas.getContext('2d'),\n            gradient = ctx.createLinearGradient(0, 0, canvas.width - 1, 0);\n        gradient.addColorStop(0, `hsla(0, 0%, 50%, 0)`);\n        gradient.addColorStop(1, `hsla(0, 0%, 50%, 1)`);\n        ctx.fillStyle = gradient;\n        ctx.fillRect(0, 0, ALPHA_BAR_SIZE[0], ALPHA_BAR_SIZE[1]);\n        // gestisco gli eventi per la selezione del valore e segnalo il cambiamento tramite callbak\n        // una volta che il puntatore è premuto sul canvas (mousedown) \n        // intercetto le variazioni nella posizione del puntatore (mousemove)\n        // relativamente al document, in modo che il puntatore in movimento possa uscire dal canvas\n        // una volta sollevato (mouseup) elimino i listener\n        const onMouseMove = (e) => {\n            const x = limit(e.clientX - canvas.getBoundingClientRect().left, 0, ALPHA_BAR_SIZE[0]),\n                alpha = +(x / ALPHA_BAR_SIZE[0]).toFixed(2);\n            this.alphaPointer.style.left = (x - 7) + 'px';\n            this.onValueChanged(ALPHA, alpha);\n        };\n        const onMouseUp = () => {\n            // rimuovo i listener, verranno riattivati al prossimo mousedown\n            document.removeEventListener('mousemove', onMouseMove);\n            document.removeEventListener('mouseup', onMouseUp);\n        };\n        // mouse down sul canvas: intercetto il movimento, smetto appena il mouse viene sollevato\n        canvas.addEventListener('mousedown', (e) => {\n            onMouseMove(e);\n            document.addEventListener('mousemove', onMouseMove);\n            document.addEventListener('mouseup', onMouseUp);\n        });\n    }\n\n    setupInput(input) {\n        const min = +input.min,\n            max = +input.max,\n            prop = input.name;\n        if (input.hasAttribute('select-on-focus')) {\n            input.addEventListener('focus', () => {\n                //non funziona in IE/Edge\n                input.select();\n            });\n        }\n        if (input.type === 'text') {\n            input.addEventListener('change', () => {\n                this.onValueChanged(prop, input.value);\n            });\n        } else {\n            if (IS_EDGE || IS_IE11) {\n                // edge modifica il valore con le frecce MA non scatena l'evento change\n                // quindi le intercetto impostando e.returnValue a false in modo\n                // che non il valore non venga modificato anche da edge subito dopo il keydown\n                input.addEventListener('keydown', (e) => {\n                    if (e.key === 'Up') {\n                        input.value = limit((+input.value) + 1, min, max);\n                        this.onValueChanged(prop, input.value);\n                        e.returnValue = false;\n                    } else if (e.key === 'Down') {\n                        input.value = limit((+input.value) - 1, min, max);\n                        this.onValueChanged(prop, input.value);\n                        e.returnValue = false;\n                    }\n                });\n            }\n            input.addEventListener('change', () => {\n                const value = +input.value;\n                this.onValueChanged(prop, limit(value, min, max));\n            });\n        }\n    }\n\n    setupClipboard(input) {\n        // l'input ricopre completamente la preview ma è totalmente trasparente\n        input.title = 'click to copy';\n        input.addEventListener('click', () => {\n            // non uso direttamente inputRGBHEX perchè potrebbe contenere un colore non valido\n            //  converto in hexcss4 quindi aggiunge anche il valore hex dell'alpha ma solo se significativo (0<=a<1)\n            input.value = parseColor([this.R, this.G, this.B, this.A], 'hexcss4');\n            input.select();\n            document.execCommand('copy');\n        });\n    }\n\n    setPalette(row) {\n        // palette è una copia di this.options.palette\n        const palette = ensureArray(this.options.palette);\n        if (this.options.paletteEditable || palette.length > 0) {\n            const addColorToPalette = (hex, refElement, fire) => {\n                // se il colore è già presente, non creo un nuovo <div> ma sposto quello esistente in coda\n                const el = row.querySelector('.a-color-picker-palette-color[data-color=\"' + hex + '\"]') ||\n                    document.createElement('div');\n                el.className = 'a-color-picker-palette-color';\n                el.style.backgroundColor = hex;\n                el.setAttribute('data-color', hex);\n                el.title = hex;\n                row.insertBefore(el, refElement);\n                this.palette[hex] = true;\n                if (fire) {\n                    this.onPaletteColorAdd(hex);\n                }\n            };\n            const removeColorToPalette = (element, fire) => {\n                // se element è nullo elimino tutti i colori\n                if (element) {\n                    row.removeChild(element);\n                    this.palette[element.getAttribute('data-color')] = false;\n                    if (fire) {\n                        this.onPaletteColorRemove(element.getAttribute('data-color'));\n                    }\n                } else {\n                    row.querySelectorAll('.a-color-picker-palette-color[data-color]').forEach(el => {\n                        row.removeChild(el);\n                    });\n                    Object.keys(this.palette).forEach(k => {\n                        this.palette[k] = false;\n                    });\n                    if (fire) {\n                        this.onPaletteColorRemove();\n                    }\n                }\n            };\n            // solo i colori validi vengono aggiunti alla palette\n            palette.map(c => parseColor(c, 'hex'))\n                .filter(c => !!c)\n                .forEach(c => addColorToPalette(c));\n            // in caso di palette editabile viene aggiunto un pulsante + che serve ad aggiungere il colore corrente\n            if (this.options.paletteEditable) {\n                const el = document.createElement('div');\n                el.className = 'a-color-picker-palette-color a-color-picker-palette-add';\n                el.innerHTML = '+';\n                row.appendChild(el);\n                // gestisco eventi di aggiunta/rimozione/selezione colori\n                row.addEventListener('click', (e) => {\n                    if (/a-color-picker-palette-add/.test(e.target.className)) {\n                        if (e.shiftKey) {\n                            // rimuove tutti i colori\n                            removeColorToPalette(null, true);\n                        } else {\n                            // aggiungo il colore e triggero l'evento 'oncoloradd'\n                            addColorToPalette(rgbToHex(this.R, this.G, this.B), e.target, true);\n                        }\n                    } else if (/a-color-picker-palette-color/.test(e.target.className)) {\n                        if (e.shiftKey) {\n                            // rimuovo il colore e triggero l'evento 'oncolorremove'\n                            removeColorToPalette(e.target, true);\n                        } else {\n                            // visto che il colore letto da backgroundColor risulta nel formato rgb()\n                            // devo usare il valore hex originale\n                            this.onValueChanged(COLOR, e.target.getAttribute('data-color'));\n                        }\n                    }\n                });\n            } else {\n                // gestisco il solo evento di selezione del colore\n                row.addEventListener('click', (e) => {\n                    if (/a-color-picker-palette-color/.test(e.target.className)) {\n                        // visto che il colore letto da backgroundColor risulta nel formato rgb()\n                        // devo usare il valore hex originale\n                        this.onValueChanged(COLOR, e.target.getAttribute('data-color'));\n                    }\n                });\n            }\n        } else {\n            // la palette con i colori predefiniti viene nasconsta se non ci sono colori\n            row.style.display = 'none';\n        }\n    }\n\n    onValueChanged(prop, value) {\n        // console.log(prop, value);\n        switch (prop) {\n            case HUE:\n                this.H = value;\n                [this.R, this.G, this.B] = hslToRgb(this.H, this.S, this.L);\n                this.slBarHelper.setHue(value);\n                this.updatePointerH(this.H);\n                this.updateInputHSL(this.H, this.S, this.L);\n                this.updateInputRGB(this.R, this.G, this.B);\n                this.updateInputRGBHEX(this.R, this.G, this.B);\n                break;\n            case SATURATION:\n                this.S = value;\n                [this.R, this.G, this.B] = hslToRgb(this.H, this.S, this.L);\n                this.updatePointerSL(this.H, this.S, this.L);\n                this.updateInputHSL(this.H, this.S, this.L);\n                this.updateInputRGB(this.R, this.G, this.B);\n                this.updateInputRGBHEX(this.R, this.G, this.B);\n                break;\n            case LUMINANCE:\n                this.L = value;\n                [this.R, this.G, this.B] = hslToRgb(this.H, this.S, this.L);\n                this.updatePointerSL(this.H, this.S, this.L);\n                this.updateInputHSL(this.H, this.S, this.L);\n                this.updateInputRGB(this.R, this.G, this.B);\n                this.updateInputRGBHEX(this.R, this.G, this.B);\n                break;\n            case RED:\n                this.R = value;\n                [this.H, this.S, this.L] = rgbToHsl(this.R, this.G, this.B);\n                this.slBarHelper.setHue(this.H);\n                this.updatePointerH(this.H);\n                this.updatePointerSL(this.H, this.S, this.L);\n                this.updateInputHSL(this.H, this.S, this.L);\n                this.updateInputRGBHEX(this.R, this.G, this.B);\n                break;\n            case GREEN:\n                this.G = value;\n                [this.H, this.S, this.L] = rgbToHsl(this.R, this.G, this.B);\n                this.slBarHelper.setHue(this.H);\n                this.updatePointerH(this.H);\n                this.updatePointerSL(this.H, this.S, this.L);\n                this.updateInputHSL(this.H, this.S, this.L);\n                this.updateInputRGBHEX(this.R, this.G, this.B);\n                break;\n            case BLUE:\n                this.B = value;\n                [this.H, this.S, this.L] = rgbToHsl(this.R, this.G, this.B);\n                this.slBarHelper.setHue(this.H);\n                this.updatePointerH(this.H);\n                this.updatePointerSL(this.H, this.S, this.L);\n                this.updateInputHSL(this.H, this.S, this.L);\n                this.updateInputRGBHEX(this.R, this.G, this.B);\n                break;\n            case RGB:\n                [this.R, this.G, this.B] = value;\n                [this.H, this.S, this.L] = rgbToHsl(this.R, this.G, this.B);\n                this.updateInputHSL(this.H, this.S, this.L);\n                this.updateInputRGB(this.R, this.G, this.B);\n                this.updateInputRGBHEX(this.R, this.G, this.B);\n                break;\n            case RGBA_USER:\n                [this.R, this.G, this.B, this.A] = value;\n                [this.H, this.S, this.L] = rgbToHsl(this.R, this.G, this.B);\n                this.slBarHelper.setHue(this.H);\n                this.updatePointerH(this.H);\n                this.updatePointerSL(this.H, this.S, this.L);\n                this.updateInputHSL(this.H, this.S, this.L);\n                this.updateInputRGB(this.R, this.G, this.B);\n                this.updateInputRGBHEX(this.R, this.G, this.B);\n                this.updatePointerA(this.A);\n                break;\n            case HSLA_USER:\n                [this.H, this.S, this.L, this.A] = value;\n                [this.R, this.G, this.B] = hslToRgb(this.H, this.S, this.L);\n                this.slBarHelper.setHue(this.H);\n                this.updatePointerH(this.H);\n                this.updatePointerSL(this.H, this.S, this.L);\n                this.updateInputHSL(this.H, this.S, this.L);\n                this.updateInputRGB(this.R, this.G, this.B);\n                this.updateInputRGBHEX(this.R, this.G, this.B);\n                this.updatePointerA(this.A);\n                break;\n            case RGBHEX:\n                [this.R, this.G, this.B] = cssColorToRgb(value) || [this.R, this.G, this.B];\n                [this.H, this.S, this.L] = rgbToHsl(this.R, this.G, this.B);\n                this.slBarHelper.setHue(this.H);\n                this.updatePointerH(this.H);\n                this.updatePointerSL(this.H, this.S, this.L);\n                this.updateInputHSL(this.H, this.S, this.L);\n                this.updateInputRGB(this.R, this.G, this.B);\n                break;\n            case COLOR:\n                [this.R, this.G, this.B, this.A] = parseColor(value, 'rgba') || [0, 0, 0, 1];\n                [this.H, this.S, this.L] = rgbToHsl(this.R, this.G, this.B);\n                this.slBarHelper.setHue(this.H);\n                this.updatePointerH(this.H);\n                this.updatePointerSL(this.H, this.S, this.L);\n                this.updateInputHSL(this.H, this.S, this.L);\n                this.updateInputRGB(this.R, this.G, this.B);\n                this.updateInputRGBHEX(this.R, this.G, this.B);\n                this.updatePointerA(this.A);\n                break;\n            case ALPHA:\n                this.A = value;\n                break;\n        }\n        this.onColorChanged(this.R, this.G, this.B, this.A);\n    }\n\n    onColorChanged(r, g, b, a) {\n        if (a === 1) {\n            this.preview.style.backgroundColor = `rgb(${r},${g},${b})`;\n        } else {\n            this.preview.style.backgroundColor = `rgba(${r},${g},${b},${a})`;\n        }\n        // this.onchange && this.onchange();\n        this.onchange && this.onchange(this.preview.style.backgroundColor);\n    }\n\n    onPaletteColorAdd(color) {\n        this.oncoloradd && this.oncoloradd(color);\n    }\n\n    onPaletteColorRemove(color) {\n        this.oncolorremove && this.oncolorremove(color);\n    }\n\n    updateInputHSL(h, s, l) {\n        this.inputH.value = h;\n        this.inputS.value = s;\n        this.inputL.value = l;\n    }\n\n    updateInputRGB(r, g, b) {\n        this.inputR.value = r;\n        this.inputG.value = g;\n        this.inputB.value = b;\n    }\n\n    updateInputRGBHEX(r, g, b) {\n        this.inputRGBHEX.value = rgbToHex(r, g, b);\n    }\n\n    updatePointerH(h) {\n        const x = HUE_BAR_SIZE[0] * h / 360;\n        this.huePointer.style.left = (x - 7) + 'px';\n    }\n\n    updatePointerSL(h, s, l) {\n        const [r, g, b] = hslToRgb(h, s, l);\n        const [x, y] = this.slBarHelper.findColor(r, g, b);\n        if (x >= 0) {\n            this.slPointer.style.left = (x - 7) + 'px';\n            this.slPointer.style.top = (y - 7) + 'px';\n        }\n    }\n\n    updatePointerA(a) {\n        const x = ALPHA_BAR_SIZE[0] * a;\n        this.alphaPointer.style.left = (x - 7) + 'px';\n    }\n}\n\nclass EventEmitter {\n    constructor(name) {\n        this.name = name;\n        this.listeners = [];\n    }\n    on(callback) {\n        if (callback) {\n            this.listeners.push(callback);\n        }\n    }\n    off(callback) {\n        if (callback) {\n            this.listeners = this.listeners.filter(cb => cb !== callback);\n        } else {\n            this.listeners = [];\n        }\n    }\n    emit(args, _this) {\n        const listeners = this.listeners.slice(0);\n        for (let ii = 0; ii < listeners.length; ii++) {\n            listeners[ii].apply(_this, args);\n        }\n    }\n}\n\n// function wrapEventCallback(ctrl, picker, eventName, cb) {\n//     if (cb && typeof cb === 'function') {\n//         picker['on' + eventName] = () => {\n//             cb.call(null, ctrl, ...arguments);\n//         };\n//     } else {\n//         picker['on' + eventName] = null;\n//     }\n// }\n\n/**\n * Crea il color picker.\n * Le opzioni sono:\n * - attachTo: elemento DOM al quale aggiungere il picker (default 'body')\n * - showHSL: indica se mostrare i campi per la definizione del colore in formato HSL (default true)\n * - showRGB: indica se mostrare i campi per la definizione del colore in formato RGB (default true)\n * - showHEX: indica se mostrare i campi per la definizione del colore in formato RGB HEX (default true)\n * - color: colore iniziale (default '#ff0000')\n *\n * @param      {Object}          element (opzionale) Un elemento HTML che andrà a contenere il picker\n * @param      {Object}          options  (opzionale) Le opzioni di creazione\n * @return     {Object}          ritorna un controller per impostare e recuperare il colore corrente del picker\n */\nfunction createPicker(element, options) {\n    // TODO: BUG solo options con attachTo non valorizzato genera errore (body non viene trovato)\n\n    const picker = new ColorPicker(element, options);\n    // gestione degli eventi: il \"controller\" assegna le callbak degli eventi ai rispettivi EventEmitter\n    // quando il picker triggera un evento, \n    //  il \"controller\" emette lo stesso evento tramite il rispettivo EventEmitter\n    const cbEvents = {\n        change: new EventEmitter('change'),\n        coloradd: new EventEmitter('coloradd'),\n        colorremove: new EventEmitter('colorremove')\n    };\n    let isChanged = true,\n        // memoize per la proprietà all\n        memAll = {};\n    // non permetto l'accesso diretto al picker\n    // ma ritorno un \"controller\" per eseguire solo alcune azioni (get/set colore, eventi, etc.)\n    const controller = {\n        get element() {\n            return picker.element;\n        },\n\n        get rgb() {\n            return [picker.R, picker.G, picker.B];\n        },\n\n        set rgb([r, g, b]) {\n            [r, g, b] = [limit(r, 0, 255), limit(g, 0, 255), limit(b, 0, 255)];\n            picker.onValueChanged(RGBA_USER, [r, g, b, 1]);\n        },\n\n        get hsl() {\n            return [picker.H, picker.S, picker.L];\n        },\n\n        set hsl([h, s, l]) {\n            [h, s, l] = [limit(h, 0, 360), limit(s, 0, 100), limit(l, 0, 100)];\n            picker.onValueChanged(HSLA_USER, [h, s, l, 1]);\n        },\n\n        get rgbhex() {\n            // return rgbToHex(picker.R, picker.G, picker.B);\n            return this.all.hex;\n        },\n\n        get rgba() {\n            return [picker.R, picker.G, picker.B, picker.A];\n        },\n\n        set rgba([r, g, b, a]) {\n            [r, g, b, a] = [limit(r, 0, 255), limit(g, 0, 255), limit(b, 0, 255), limit(a, 0, 1)];\n            picker.onValueChanged(RGBA_USER, [r, g, b, a]);\n        },\n\n        get hsla() {\n            return [picker.H, picker.S, picker.L, picker.A];\n        },\n\n        set hsla([h, s, l, a]) {\n            [h, s, l, a] = [limit(h, 0, 360), limit(s, 0, 100), limit(l, 0, 100), limit(a, 0, 1)];\n            picker.onValueChanged(HSLA_USER, [h, s, l, a]);\n        },\n\n        /**\n         * Ritorna il colore corrente nel formato RGB HEX, \n         * oppure nella notazione rgba() con alpha != 1.\n         *\n         * @return     {string}  colore corrente\n         */\n        get color() {\n            // if (picker.A === 1) {\n            //     return this.rgbhex;\n            // } else {\n            //     return `rgba(${picker.R},${picker.G},${picker.B},${picker.A})`;\n            // }\n            return this.all.toString();\n        },\n\n        /**\n         * Imposta il colore corrente.\n         * Accetta:\n         * - il nome di un colore (https://developer.mozilla.org/en-US/docs/Web/CSS/color_value)\n         * - un colore espresso nel formato RGB HEX sia esteso (#ffdd00) che compatto (#fd0)\n         * - un array di interi [R,G,B]\n         *\n         * @param      {string|array}  color   il colore\n         */\n        set color(color) {\n            picker.onValueChanged(COLOR, color);\n        },\n\n        /**\n         * @return  {Object}    oggetto contenente il colore corrente in tutti i formati noti a parseColor()\n         */\n        get all() {\n            if (isChanged) {\n                const rgba = [picker.R, picker.G, picker.B, picker.A];\n                // la conversione in stringa segue le regole della proprietà color\n                const ts = picker.A < 1 ? `rgba(${picker.R},${picker.G},${picker.B},${picker.A})` : rgbToHex(...rgba);\n                // passando un oggetto a parseColor come secondo parametro, lo riempirà con tutti i formati disponibili\n                memAll = parseColor(rgba, memAll);\n                memAll.toString = () => ts;\n                isChanged = false;\n            }\n            // devo per forza passare una copia, altrimenti memAll può esssere modificato dall'esterno\n            return Object.assign({}, memAll);\n        },\n\n        /**\n         * @deprecated\n         */\n        get onchange() {\n            return cbEvents.change && cbEvents.change.listeners[0];\n        },\n\n        /**\n         * @deprecated  usare on('change', cb)\n         */\n        set onchange(cb) {\n            // wrapEventCallback(this, picker, 'change', cb);\n            // cbEvents['change'] = cb;\n            this.off('change').on('change', cb);\n        },\n\n        /**\n         * @deprecated\n         */\n        get oncoloradd() {\n            return cbEvents.coloradd && cbEvents.coloradd.listeners[0];\n        },\n\n        /**\n         * @deprecated  usare on('coloradd', cb)\n         */\n        set oncoloradd(cb) {\n            // wrapEventCallback(this, picker, 'coloradd', cb);\n            // cbEvents['coloradd'] = cb;\n            this.off('coloradd').on('coloradd', cb);\n        },\n\n        /**\n         * @deprecated\n         */\n        get oncolorremove() {\n            return cbEvents.colorremove && cbEvents.colorremove.listeners[0];\n        },\n\n        /**\n         * @deprecated  usare on('colorremove', cb)\n         */\n        set oncolorremove(cb) {\n            // wrapEventCallback(this, picker, 'colorremove', cb);\n            // cbEvents['colorremove'] = cb;\n            this.off('colorremove').on('colorremove', cb);\n        },\n\n        /**\n         * Ritorna la palette dei colori.\n         *\n         * @return     {Array}  array di colori in formato hex\n         */\n        get palette() {\n            return Object.keys(picker.palette).filter(k => picker.palette[k]);\n        },\n\n        on(eventName, cb) {\n            if (eventName) {\n                cbEvents[eventName] && cbEvents[eventName].on(cb);\n            }\n            return this;\n        },\n\n        off(eventName) {\n            if (eventName) {\n                cbEvents[eventName] && cbEvents[eventName].off(cb);\n            }\n            return this;\n        }\n    };\n    // ogni volta che viene triggerato un evento, uso il corrispettivo EventEmitter per propagarlo a tutte le callback associate\n    //  le callback vengono richiamate con il \"controller\" come \"this\" \n    //  e il primo parametro è sempre il \"controller\" seguito da tutti i parametri dell'evento\n    picker.onchange = (...args) => {\n        isChanged = true; // così le proprietà in lettura dovranno ricalcolare il loro valore\n        cbEvents.change.emit([controller, ...args], controller);\n    };\n    picker.oncoloradd = (...args) => {\n        cbEvents.coloradd.emit([controller, ...args], controller);\n    };\n    picker.oncolorremove = (...args) => {\n        cbEvents.colorremove.emit([controller, ...args], controller);\n    };\n    return controller;\n}\n\n/**\n * \n * @param {any} selector \n * @param {object} options \n * @return  un Array di controller così come restituito da createPicker()\n */\nfunction from(selector, options) {\n    // TODO: gestire eventuali errori nella creazione del picker\n    const pickers = parseElements(selector).map((el, index) => {\n        const picker = createPicker(el, options);\n        picker.index = index;\n        return picker;\n    });\n    pickers.on = function (eventName, cb) {\n        pickers.forEach(picker => picker.on(eventName, cb));\n        return this;\n    };\n    pickers.off = function (eventName) {\n        pickers.forEach(picker => picker.off(eventName));\n        return this;\n    };\n    return pickers;\n}\n\nif (typeof window !== 'undefined') {\n    // solo in ambiente browser inserisco direttamente nella pagina html il css\n    //  per sicurezza controllo che non sia già presente\n    if (!document.querySelector('head>style[data-source=\"a-color-picker\"]')) {\n        const css = require('./main.css').toString();\n        const style = document.createElement('style');\n        style.setAttribute('type', 'text/css');\n        style.setAttribute('data-source', 'a-color-picker');\n        style.innerHTML = css;\n        // TODO: verificare che esista <head>\n        document.querySelector('head').appendChild(style);\n    }\n}\n\nexport {\n    createPicker,\n    from,\n    parseColorToRgb,\n    parseColorToRgba,\n    parseColorToHsl,\n    parseColorToHsla,\n    parseColor,\n    rgbToHex,\n    hslToRgb,\n    rgbToHsl,\n    rgbToInt,\n    intToRgb,\n    getLuminance,\n    COLOR_NAMES,\n    PALETTE_MATERIAL_500,\n    PALETTE_MATERIAL_CHROME,\n    VERSION\n};\n\n\n// WEBPACK FOOTER //\n// src/main.js","const isPlainObject = require('is-plain-object');\n\nconst COLOR_NAMES = { 'aliceblue': '#F0F8FF', 'antiquewhite': '#FAEBD7', 'aqua': '#00FFFF', 'aquamarine': '#7FFFD4', 'azure': '#F0FFFF', 'beige': '#F5F5DC', 'bisque': '#FFE4C4', 'black': '#000000', 'blanchedalmond': '#FFEBCD', 'blue': '#0000FF', 'blueviolet': '#8A2BE2', 'brown': '#A52A2A', 'burlywood': '#DEB887', 'cadetblue': '#5F9EA0', 'chartreuse': '#7FFF00', 'chocolate': '#D2691E', 'coral': '#FF7F50', 'cornflowerblue': '#6495ED', 'cornsilk': '#FFF8DC', 'crimson': '#DC143C', 'cyan': '#00FFFF', 'darkblue': '#00008B', 'darkcyan': '#008B8B', 'darkgoldenrod': '#B8860B', 'darkgray': '#A9A9A9', 'darkgrey': '#A9A9A9', 'darkgreen': '#006400', 'darkkhaki': '#BDB76B', 'darkmagenta': '#8B008B', 'darkolivegreen': '#556B2F', 'darkorange': '#FF8C00', 'darkorchid': '#9932CC', 'darkred': '#8B0000', 'darksalmon': '#E9967A', 'darkseagreen': '#8FBC8F', 'darkslateblue': '#483D8B', 'darkslategray': '#2F4F4F', 'darkslategrey': '#2F4F4F', 'darkturquoise': '#00CED1', 'darkviolet': '#9400D3', 'deeppink': '#FF1493', 'deepskyblue': '#00BFFF', 'dimgray': '#696969', 'dimgrey': '#696969', 'dodgerblue': '#1E90FF', 'firebrick': '#B22222', 'floralwhite': '#FFFAF0', 'forestgreen': '#228B22', 'fuchsia': '#FF00FF', 'gainsboro': '#DCDCDC', 'ghostwhite': '#F8F8FF', 'gold': '#FFD700', 'goldenrod': '#DAA520', 'gray': '#808080', 'grey': '#808080', 'green': '#008000', 'greenyellow': '#ADFF2F', 'honeydew': '#F0FFF0', 'hotpink': '#FF69B4', 'indianred ': '#CD5C5C', 'indigo ': '#4B0082', 'ivory': '#FFFFF0', 'khaki': '#F0E68C', 'lavender': '#E6E6FA', 'lavenderblush': '#FFF0F5', 'lawngreen': '#7CFC00', 'lemonchiffon': '#FFFACD', 'lightblue': '#ADD8E6', 'lightcoral': '#F08080', 'lightcyan': '#E0FFFF', 'lightgoldenrodyellow': '#FAFAD2', 'lightgray': '#D3D3D3', 'lightgrey': '#D3D3D3', 'lightgreen': '#90EE90', 'lightpink': '#FFB6C1', 'lightsalmon': '#FFA07A', 'lightseagreen': '#20B2AA', 'lightskyblue': '#87CEFA', 'lightslategray': '#778899', 'lightslategrey': '#778899', 'lightsteelblue': '#B0C4DE', 'lightyellow': '#FFFFE0', 'lime': '#00FF00', 'limegreen': '#32CD32', 'linen': '#FAF0E6', 'magenta': '#FF00FF', 'maroon': '#800000', 'mediumaquamarine': '#66CDAA', 'mediumblue': '#0000CD', 'mediumorchid': '#BA55D3', 'mediumpurple': '#9370DB', 'mediumseagreen': '#3CB371', 'mediumslateblue': '#7B68EE', 'mediumspringgreen': '#00FA9A', 'mediumturquoise': '#48D1CC', 'mediumvioletred': '#C71585', 'midnightblue': '#191970', 'mintcream': '#F5FFFA', 'mistyrose': '#FFE4E1', 'moccasin': '#FFE4B5', 'navajowhite': '#FFDEAD', 'navy': '#000080', 'oldlace': '#FDF5E6', 'olive': '#808000', 'olivedrab': '#6B8E23', 'orange': '#FFA500', 'orangered': '#FF4500', 'orchid': '#DA70D6', 'palegoldenrod': '#EEE8AA', 'palegreen': '#98FB98', 'paleturquoise': '#AFEEEE', 'palevioletred': '#DB7093', 'papayawhip': '#FFEFD5', 'peachpuff': '#FFDAB9', 'peru': '#CD853F', 'pink': '#FFC0CB', 'plum': '#DDA0DD', 'powderblue': '#B0E0E6', 'purple': '#800080', 'rebeccapurple': '#663399', 'red': '#FF0000', 'rosybrown': '#BC8F8F', 'royalblue': '#4169E1', 'saddlebrown': '#8B4513', 'salmon': '#FA8072', 'sandybrown': '#F4A460', 'seagreen': '#2E8B57', 'seashell': '#FFF5EE', 'sienna': '#A0522D', 'silver': '#C0C0C0', 'skyblue': '#87CEEB', 'slateblue': '#6A5ACD', 'slategray': '#708090', 'slategrey': '#708090', 'snow': '#FFFAFA', 'springgreen': '#00FF7F', 'steelblue': '#4682B4', 'tan': '#D2B48C', 'teal': '#008080', 'thistle': '#D8BFD8', 'tomato': '#FF6347', 'turquoise': '#40E0D0', 'violet': '#EE82EE', 'wheat': '#F5DEB3', 'white': '#FFFFFF', 'whitesmoke': '#F5F5F5', 'yellow': '#FFFF00', 'yellowgreen': '#9ACD32' };\nconst PALETTE_MATERIAL_500 = ['#F44336', '#E91E63', '#E91E63', '#9C27B0', '#9C27B0', '#673AB7', '#673AB7', '#3F51B5', '#3F51B5', '#2196F3', '#2196F3', '#03A9F4', '#03A9F4', '#00BCD4', '#00BCD4', '#009688', '#009688', '#4CAF50', '#4CAF50', '#8BC34A', '#8BC34A', '#CDDC39', '#CDDC39', '#FFEB3B', '#FFEB3B', '#FFC107', '#FFC107', '#FF9800', '#FF9800', '#FF5722', '#FF5722', '#795548', '#795548', '#9E9E9E', '#9E9E9E', '#607D8B', '#607D8B'];\nconst PALETTE_MATERIAL_CHROME = ['#f44336', '#e91e63', '#9c27b0', '#673ab7', '#3f51b5', '#2196f3', '#03a9f4', '#00bcd4', '#009688', '#4caf50', '#8bc34a', '#cddc39', '#ffeb3b', '#ffc107', '#ff9800', '#ff5722', '#795548', '#9e9e9e', '#607d8b'];\n\nfunction limit(value, min, max) {\n    value = +value;\n    return isNaN(value) ? min : (value < min ? min : (value > max ? max : value));\n}\n\nfunction nvl(value, def) {\n    return value === null || value === undefined ? def : value;\n}\n\nfunction ensureArray(arrayLike) {\n    if (!arrayLike) return [];\n    return Array.from(arrayLike);\n}\n\n/**\n * Converte il colore da [r,g,b] al formato RGB HEX.\n *\n * @param      {number}  r       rosso (0-255)\n * @param      {number}  g       verde (0-255)\n * @param      {number}  b       blu (0-255)\n * @return     {string}  colore nel fomrato RGB HX (es: #ffdd00)\n */\nfunction rgbToHex(r, g, b) {\n    [r, g, b] = [limit(r, 0, 255), limit(g, 0, 255), limit(b, 0, 255)];\n    return \"#\" + (\"000000\" + ((r << 16) | (g << 8) | b).toString(16)).slice(-6);\n}\n\n/**\n * Converte da HSL a RGB.\n * @see https://gist.github.com/mjackson/5311256\n *\n * @param      {number}                   h       hue 0-360\n * @param      {number}                   s       saturaion 0-100\n * @param      {(Function|number)}        l       luminance 0-100\n * @return     {Array}  un array con R(0-255) G(0-255) B(0-255)\n */\nfunction hslToRgb(h, s, l) {\n    let r, g, b;\n    [h, s, l] = [limit(h, 0, 360) / 360, limit(s, 0, 100) / 100, limit(l, 0, 100) / 100];\n\n    if (s == 0) {\n        r = g = b = l; // achromatic\n    } else {\n        const hue2rgb = (p, q, t) => {\n            if (t < 0) t += 1;\n            if (t > 1) t -= 1;\n            if (t < 1 / 6) return p + (q - p) * 6 * t;\n            if (t < 1 / 2) return q;\n            if (t < 2 / 3) return p + (q - p) * (2 / 3 - t) * 6;\n            return p;\n        };\n\n        const q = l < 0.5 ? l * (1 + s) : l + s - l * s;\n        const p = (2 * l) - q;\n\n        r = hue2rgb(p, q, h + (1 / 3));\n        g = hue2rgb(p, q, h);\n        b = hue2rgb(p, q, h - (1 / 3));\n    }\n\n    return [r * 255, g * 255, b * 255].map(Math.round);\n}\n\n/**\n * Converte da RGB a HSL.\n * @see https://gist.github.com/mjackson/5311256\n * \n * @param      {number}  r       rosso 0-255\n * @param      {number}  g       veerde 0-255\n * @param      {number}  b       blu 0-255\n * @return     {Array}   un array con H(0-360) S(0-100) L(0-100)\n */\nfunction rgbToHsl(r, g, b) {\n    [r, g, b] = [limit(r, 0, 255) / 255, limit(g, 0, 255) / 255, limit(b, 0, 255) / 255];\n\n    const max = Math.max(r, g, b),\n        min = Math.min(r, g, b);\n    let h, s, l = (max + min) / 2;\n\n    if (max == min) {\n        h = s = 0; // achromatic\n    } else {\n        const d = max - min;\n        s = l > 0.5 ? d / (2 - max - min) : d / (max + min);\n\n        switch (max) {\n            case r:\n                h = ((g - b) / d) + (g < b ? 6 : 0);\n                break;\n            case g:\n                h = ((b - r) / d) + 2;\n                break;\n            case b:\n                h = ((r - g) / d) + 4;\n                break;\n        }\n\n        h /= 6;\n    }\n\n    return [h * 360, s * 100, l * 100].map(Math.round);\n}\n\nfunction rgbToInt(r, g, b) {\n    return (r << 16) | (g << 8) | b;\n}\n\nfunction intToRgb(int) {\n    return [\n        (int >> 16) & 255, //r\n        (int >> 8) & 255, //g\n        int & 255 //b\n    ];\n}\n\n/**\n * @deprecated  usare cssColorToRgba()\n * @param {string} color \n */\nfunction cssColorToRgb(color) {\n    if (color) {\n        const colorByName = COLOR_NAMES[color.toString().toLowerCase()];\n        // considero sia il formato esteso #RRGGGBB che quello corto #RGB\n        // provo a estrarre i valori da colorByName solo se questo è valorizzato, altrimenti uso direttamente color\n        const [, , , r, g, b, , rr, gg, bb] = /^\\s*#?((([0-9A-F])([0-9A-F])([0-9A-F]))|(([0-9A-F]{2})([0-9A-F]{2})([0-9A-F]{2})))\\s*$/i.exec(colorByName || color) || [];\n        if (r !== undefined) {\n            return [\n                parseInt(r + r, 16),\n                parseInt(g + g, 16),\n                parseInt(b + b, 16)\n            ];\n        } else if (rr !== undefined) {\n            return [\n                parseInt(rr, 16),\n                parseInt(gg, 16),\n                parseInt(bb, 16)\n            ];\n        }\n    }\n    return undefined;\n}\n\nfunction cssColorToRgba(color) {\n    if (color) {\n        const colorByName = COLOR_NAMES[color.toString().toLowerCase()];\n        // considero sia il formato esteso #RRGGGBB[AA] che quello corto #RGB[A]\n        // provo a estrarre i valori da colorByName solo se questo è valorizzato, altrimenti uso direttamente color\n        const [, , , r, g, b, a, , rr, gg, bb, aa] = /^\\s*#?((([0-9A-F])([0-9A-F])([0-9A-F])([0-9A-F])?)|(([0-9A-F]{2})([0-9A-F]{2})([0-9A-F]{2})([0-9A-F]{2})?))\\s*$/i.exec(colorByName || color) || [];\n        if (r !== undefined) {\n            return [\n                parseInt(r + r, 16),\n                parseInt(g + g, 16),\n                parseInt(b + b, 16),\n                a ? +((parseInt(a + a, 16)) / 255).toFixed(2) : 1\n            ];\n        } else if (rr !== undefined) {\n            return [\n                parseInt(rr, 16),\n                parseInt(gg, 16),\n                parseInt(bb, 16),\n                aa ? +((parseInt(aa, 16)) / 255).toFixed(2) : 1\n            ];\n        }\n    }\n    return undefined;\n}\n\n/**\n * @deprecated  usare cssRgbaToRgba()\n * @param {string} rgb \n */\nfunction cssRgbToRgb(rgb) {\n    if (rgb) {\n        // rgb(int, int, int)\n        const [m, r, g, b] = /^rgb\\((\\d+)[\\s,](\\d+)[\\s,](\\d+)\\)/i.exec(rgb) || [];\n        return m ? [limit(r, 0, 255), limit(g, 0, 255), limit(b, 0, 255)] : undefined;\n    }\n    return undefined;\n}\n\nfunction cssRgbaToRgba(rgba) {\n    if (rgba) {\n        // in CSS Colors Level 4 rgba() è un alias di rgb()\n        // rgb[a](int, int, int[, dec])\n        const [m, r, g, b, , a] = /^rgba?\\((\\d+)\\s*[\\s,]\\s*(\\d+)\\s*[\\s,]\\s*(\\d+)(\\s*[\\s,]\\s*(\\d*(.\\d+)?))?\\)/i.exec(rgba) || [];\n        return m ? [limit(r, 0, 255), limit(g, 0, 255), limit(b, 0, 255), limit(nvl(a, 1), 0, 1)] : undefined;\n    }\n    return undefined;\n}\n\n/**\n * Converte il colore in ingresso nel formato [r,g,b].\n * Color può assumere questi valori:\n * - array con [r,g,b] (viene ritornato così come è)\n * - nome del colore\n * - colore nel formato RGB HEX sia compatto che esteso\n *\n * @param      {string|array}    color   Il colore da convertire\n * @return     {array}  colore nel formato [r,g,b] o undefined se non valido\n */\nfunction parseColorToRgb(color) {\n    if (Array.isArray(color)) {\n        color = [limit(color[0], 0, 255), limit(color[1], 0, 255), limit(color[2], 0, 255)];\n        return color;\n    } else {\n        return cssColorToRgb(color) || cssRgbToRgb(color);\n    }\n}\n\nfunction parseColorToRgba(color) {\n    if (Array.isArray(color)) {\n        color = [\n            limit(color[0], 0, 255),\n            limit(color[1], 0, 255),\n            limit(color[2], 0, 255),\n            limit(nvl(color[3], 1), 0, 1)\n        ];\n        return color;\n    } else {\n        const parsed = cssColorToRgba(color) || cssRgbaToRgba(color);\n        if (parsed && parsed.length === 3) {\n            parsed.push(1);\n        }\n        return parsed;\n    }\n}\n\n/**\n * @deprecated  usare cssHslaToHsla()\n * @param {string} hsl \n */\nfunction cssHslToHsl(hsl) {\n    if (hsl) {\n        // hsl(int, int, int)\n        const [m, h, s, l] = /^hsl\\((\\d+)[\\s,](\\d+)[\\s,](\\d+)\\)/i.exec(hsl) || [];\n        return m ? [limit(h, 0, 360), limit(s, 0, 100), limit(l, 0, 100)] : undefined;\n    }\n    return undefined;\n}\n\nfunction cssHslaToHsla(hsla) {\n    if (hsla) {\n        // in CSS Colors Level 4 hsla() è un alias di hsl()\n        // hsl[a](int, int, int[, dec])\n        const [m, h, s, l, , a] = /^hsla?\\((\\d+)\\s*[\\s,]\\s*(\\d+)\\s*[\\s,]\\s*(\\d+)(\\s*[\\s,]\\s*(\\d*(.\\d+)?))?\\)/i.exec(hsla) || [];\n        return m ? [limit(h, 0, 255), limit(s, 0, 255), limit(l, 0, 255), limit(nvl(a, 1), 0, 1)] : undefined;\n    }\n    return undefined;\n}\n\nfunction parseColorToHsl(color) {\n    if (Array.isArray(color)) {\n        color = [limit(color[0], 0, 360), limit(color[1], 0, 100), limit(color[2], 0, 100)];\n        return color;\n    } else {\n        return cssHslToHsl(color);\n    }\n}\n\nfunction parseColorToHsla(color) {\n    if (Array.isArray(color)) {\n        color = [\n            limit(color[0], 0, 360),\n            limit(color[1], 0, 100),\n            limit(color[2], 0, 100),\n            limit(nvl(color[3], 1), 0, 1)\n        ];\n        return color;\n    } else {\n        const parsed = cssHslaToHsla(color);\n        if (parsed && parsed.length === 3) {\n            parsed.push(1);\n        }\n        return parsed;\n    }\n}\n\n/**\n * TODO: i formati *css4 devono restituire alpha solo se questa è < 1\n * \n * outFormat può assumere questi valori:\n * rgb (default), rgbcss, rgbcss4, rgba, rgbacss, hsl, hslcss, hslcss4, hsla, hslacss, hex, hexcss4, int\n * \n * se outFormat è un oggetto (typeof 'object') gli vengono aggiunte tante proprietà \n * quanti sono i formati supportati e i rispettivi valori\n * \n * @param   {any} color \n * @param   {String|Object} outFormat formato output\n * @return  {String} colore formattato o undefined se non riconosciuto\n */\nfunction parseColor(color, outFormat) {\n    outFormat = (outFormat || 'rgb');\n    if (color !== null && color !== undefined) {\n        let pp;\n        if ((pp = parseColorToRgba(color)) ||\n            ((pp = parseColorToHsla(color)) && (pp = [...hslToRgb(...pp), pp[3]]))) {\n\n            // se outFormat è un plain object quindi {} oppure new Object()\n            // if (typeof outFormat === 'object') {\n            if (isPlainObject(outFormat)) {\n                return ['rgb', 'rgbcss', 'rgbcss4', 'rgba', 'rgbacss',\n                    'hsl', 'hslcss', 'hslcss4', 'hsla', 'hslacss',\n                    'hex', 'hexcss4', 'int'].reduce((m, f) => { m[f] = formatColor(pp, f); return m; }, outFormat || {});\n            } else {\n                // per sicurezza trasformo in stringa (potrebbe essere un numero)\n                return formatColor(pp, outFormat.toString().toLowerCase());\n            }\n        }\n    }\n\n    return undefined;\n}\n\n/**\n * \n * @private\n * @param {Array} pp rgba\n * @param {String} outFormat \n */\nfunction formatColor(pp, outFormat) {\n    switch (outFormat) {\n        case 'rgb':\n        default:\n            return pp.slice(0, 3);\n        case 'rgbcss':\n            return `rgb(${pp[0]}, ${pp[1]}, ${pp[2]})`;\n        case 'rgbcss4':\n            return `rgb(${pp[0]}, ${pp[1]}, ${pp[2]}, ${pp[3]})`;\n        case 'rgba':\n            return pp;\n        case 'rgbacss':\n            return `rgba(${pp[0]}, ${pp[1]}, ${pp[2]}, ${pp[3]})`;\n        case 'hsl':\n            return rgbToHsl(...pp);\n        case 'hslcss':\n            pp = rgbToHsl(...pp);\n            return `hsl(${pp[0]}, ${pp[1]}, ${pp[2]})`;\n        case 'hslcss4':\n            const hh = rgbToHsl(...pp);\n            return `hsl(${hh[0]}, ${hh[1]}, ${hh[2]}, ${pp[3]})`;\n        case 'hsla':\n            return [...rgbToHsl(...pp), pp[3]];\n        case 'hslacss':\n            const ha = rgbToHsl(...pp);\n            return `hsla(${ha[0]}, ${ha[1]}, ${ha[2]}, ${pp[3]})`;\n        case 'hex':\n            return rgbToHex(...pp);\n        case 'hexcss4':\n            return rgbToHex(...pp) + ('00' + parseInt(pp[3] * 255).toString(16)).slice(-2);\n        case 'int':\n            return rgbToInt(...pp);\n    }\n}\n\n/**\n * Più il risultato tende a 1 e più è luminoso.\n * \n * @param       {number} r red\n * @param       {number} g green\n * @param       {number} b blue\n * @return      {number} la luminosità da 0 (scuro) a 1 (chiaro)\n */\nfunction getLuminance(r, g, b) {\n    r = r / 255;\n    r = r < 0.03928 ? r / 12.92 : Math.pow((r + 0.055) / 1.055, 2.4);\n    g = g / 255;\n    g = g < 0.03928 ? g / 12.92 : Math.pow((g + 0.055) / 1.055, 2.4);\n    b = b / 255;\n    b = b < 0.03928 ? b / 12.92 : Math.pow((b + 0.055) / 1.055, 2.4);\n    return (0.2126 * r) + (0.7152 * g) + (0.0722 * b);\n}\n\nexport {\n    COLOR_NAMES,\n    PALETTE_MATERIAL_500,\n    PALETTE_MATERIAL_CHROME,\n    rgbToHex,\n    hslToRgb,\n    rgbToHsl,\n    rgbToInt,\n    intToRgb,\n    cssColorToRgb,\n    cssColorToRgba,\n    cssRgbToRgb,\n    cssRgbaToRgba,\n    parseColorToRgb,\n    parseColorToRgba,\n    cssHslToHsl,\n    cssHslaToHsla,\n    parseColorToHsl,\n    parseColorToHsla,\n    parseColor,\n    getLuminance,\n    limit,\n    ensureArray,\n    nvl\n};\n\n\n// WEBPACK FOOTER //\n// src/utils.js","/*!\n * is-plain-object <https://github.com/jonschlinkert/is-plain-object>\n *\n * Copyright (c) 2014-2017, Jon Schlinkert.\n * Released under the MIT License.\n */\n\n'use strict';\n\nvar isObject = require('isobject');\n\nfunction isObjectObject(o) {\n  return isObject(o) === true\n    && Object.prototype.toString.call(o) === '[object Object]';\n}\n\nmodule.exports = function isPlainObject(o) {\n  var ctor,prot;\n\n  if (isObjectObject(o) === false) return false;\n\n  // If has modified constructor\n  ctor = o.constructor;\n  if (typeof ctor !== 'function') return false;\n\n  // If has modified prototype\n  prot = ctor.prototype;\n  if (isObjectObject(prot) === false) return false;\n\n  // If constructor does not have an Object-specific method\n  if (prot.hasOwnProperty('isPrototypeOf') === false) {\n    return false;\n  }\n\n  // Most likely a plain Object\n  return true;\n};\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/is-plain-object/index.js\n// module id = 8\n// module chunks = 0","/*!\n * isobject <https://github.com/jonschlinkert/isobject>\n *\n * Copyright (c) 2014-2017, Jon Schlinkert.\n * Released under the MIT License.\n */\n\n'use strict';\n\nmodule.exports = function isObject(val) {\n  return val != null && typeof val === 'object' && Array.isArray(val) === false;\n};\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/is-plain-object/node_modules/isobject/index.js\n// module id = 9\n// module chunks = 0","\n        var result = require(\"!!../node_modules/css-loader/index.js!./main.css\");\n\n        if (typeof result === \"string\") {\n            module.exports = result;\n        } else {\n            module.exports = result.toString();\n        }\n    \n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/main.css\n// module id = 10\n// module chunks = 0","exports = module.exports = require(\"../node_modules/css-loader/lib/css-base.js\")(undefined);\n// imports\n\n\n// module\nexports.push([module.id, \".a-color-picker {\\n    background-color: #fafafa;\\n    padding: 2px;\\n    box-sizing: border-box;\\n    display: inline-flex;\\n    flex-direction: column;\\n    user-select: none;\\n    width: 208px;\\n    font: 400 10px Helvetica,Arial,sans-serif;\\n}\\n\\n.a-color-picker input {\\n    box-sizing: border-box;\\n}\\n\\n.a-color-picker-row {\\n    padding: 2px;\\n    box-sizing: border-box;\\n    display: flex;\\n    flex-direction: row;\\n    align-items: center;\\n    justify-content: space-between;\\n    user-select: none;\\n}\\n\\n.a-color-picker-row:not(:first-child) {\\n    border-top: solid 1px #eee;\\n}\\n\\n.a-color-picker-column {\\n    display: flex;\\n    flex-direction: column;\\n}\\n\\n.a-color-picker-cell {\\n    flex: 1 1 auto;\\n}\\n\\n.a-color-picker-stack {\\n    position: relative;\\n    overflow: hidden;\\n}\\n\\n.a-color-picker-dot {\\n    position: absolute;\\n    width: 14px;\\n    height: 14px;\\n    top: 0px;\\n    left: 0px;\\n    background: rgba(255, 255, 255, 0.59);\\n    pointer-events: none;\\n    border-radius: 50px;\\n    border: solid 1px #074462;\\n}\\n\\n.a-color-picker-h,\\n.a-color-picker-a {\\n    border-radius: 2px;\\n}\\n\\n.a-color-picker-preview {\\n    box-sizing: border-box;\\n    width: 40px;\\n    height: 40px;\\n    user-select: none;\\n}\\n\\n.a-color-picker-circle {\\n    border-radius: 50px;\\n    border: solid 1px #eee;    \\n}\\n\\n.a-color-picker-hsl,\\n.a-color-picker-rgb,\\n.a-color-picker-single-input {\\n    justify-content: space-evenly;\\n}\\n\\n.a-color-picker-hsl>label,\\n.a-color-picker-rgb>label,\\n.a-color-picker-single-input>label {\\n    padding: 0 6px;\\n    flex: 0 0 auto;\\n}\\n\\n.a-color-picker-hsl>input,\\n.a-color-picker-rgb>input,\\n.a-color-picker-single-input>input {\\n    text-align: center;\\n    padding: 2px 0px;\\n    width: 0;\\n    flex: 1 1 auto;\\n}\\n\\n.a-color-picker-transparent {\\n    background-image: linear-gradient(to right, #f2eeee 1px, transparent 1px), linear-gradient(to bottom, #f2eeee 1px, transparent 1px);\\n    background-size: 8px 8px;\\n}\\n\\n.a-color-picker.hide-hsl [show-on-hsl],\\n.a-color-picker.hide-rgb [show-on-rgb],\\n.a-color-picker.hide-single-input [show-on-single-input],\\n.a-color-picker.hide-alpha [show-on-alpha] {\\n    display: none;\\n}\\n\\n.a-color-picker-clipbaord {\\n    width: 100%;\\n    height: 100%;\\n    opacity: 0;\\n    cursor: pointer;\\n}\\n\\n.a-color-picker-palette {\\n    flex-flow: wrap;\\n    flex-direction: row;\\n    justify-content: flex-start;\\n    padding: 2px 0px;\\n}\\n\\n.a-color-picker-palette-color {\\n    width: 15px;\\n    height: 15px;\\n    flex: 0 1 15px;\\n    margin: 5px;\\n    box-sizing: border-box;\\n    cursor: pointer;\\n    border-radius: 3px;\\n    border: solid 1px rgba(203, 203, 203, 0.32);\\n}\\n\\n.a-color-picker-palette-add {\\n    text-align: center;\\n    line-height: 13px;\\n    color: #607D8B;\\n}\", \"\"]);\n\n// exports\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/css-loader!./src/main.css\n// module id = 11\n// module chunks = 0"],"mappings":";AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;A;;;;AC7DA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;AC3EA;AACA;;;AAAA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;;;;;;ACvBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;ACztFA;AACA;;;AAHA;AACA;AACA;AACA;AAyBA;AACA;AACA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AARA;AACA;AAUA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAeA;AACA;AA0CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AA7CA;AA+CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAVA;AAYA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;AASA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEA;AAAA;AACA;AAAA;AACA;AACA;AACA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEA;AAAA;AACA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEA;AACA;AACA;AACA;AACA;AACA;AAFA;AACA;AADA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AACA;AADA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AACA;AADA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AACA;AADA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AACA;AADA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AACA;AADA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAFA;AACA;AADA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAFA;AACA;AADA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAFA;AACA;AADA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AADA;AACA;AAAA;AAAA;AAAA;AACA;AAFA;AACA;AADA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AADA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAFA;AACA;AADA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAxGA;AA0GA;AACA;;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEA;AACA;AACA;;;AAEA;AACA;AACA;;;AAEA;AACA;AACA;AACA;AACA;;;AAEA;AACA;AACA;AACA;AACA;;;AAEA;AACA;AACA;;;AAEA;AACA;AACA;AACA;;;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;;;AAEA;AACA;AACA;AACA;;;;;;AAGA;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;;;AAAA;AACA;AACA;AACA;AACA;;;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;;;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;AAaA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAHA;AAKA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AACA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AACA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AACA;;;;;;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;AASA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;AAKA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAhKA;AAkKA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;;;;;;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;AC/gCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;AAQA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AACA;;;;;;;;;AASA;AACA;AAAA;AAAA;AADA;AAEA;AAAA;AAAA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;AASA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAEA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AATA;AACA;AAWA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAHA;AAKA;AACA;AACA;;;;AAIA;AACA;AACA;AACA;AACA;AACA;AAJA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAIA;AACA;AAKA;AACA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAJA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAIA;AACA;AAMA;AACA;AAMA;AACA;AACA;AACA;AACA;AACA;;;;AAIA;AACA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;AAUA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;AAIA;AACA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;AAaA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AA9BA;AAgCA;AACA;AACA;;;;;;;;AAQA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;ACjZA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;ACpCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;ACXA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;A","sourceRoot":""}